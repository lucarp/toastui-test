{"ast":null,"code":"import { Slice, Fragment, Mark, Node } from 'prosemirror-model';\nimport { ReplaceStep, ReplaceAroundStep, Transform } from 'prosemirror-transform';\nvar classesById = Object.create(null); // ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\n\nvar Selection = function Selection($anchor, $head, ranges) {\n  // :: [SelectionRange]\n  // The ranges covered by the selection.\n  this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]; // :: ResolvedPos\n  // The resolved anchor of the selection (the side that stays in\n  // place when the selection is modified).\n\n  this.$anchor = $anchor; // :: ResolvedPos\n  // The resolved head of the selection (the side that moves when\n  // the selection is modified).\n\n  this.$head = $head;\n};\n\nvar prototypeAccessors = {\n  anchor: {\n    configurable: true\n  },\n  head: {\n    configurable: true\n  },\n  from: {\n    configurable: true\n  },\n  to: {\n    configurable: true\n  },\n  $from: {\n    configurable: true\n  },\n  $to: {\n    configurable: true\n  },\n  empty: {\n    configurable: true\n  }\n}; // :: number\n// The selection's anchor, as an unresolved position.\n\nprototypeAccessors.anchor.get = function () {\n  return this.$anchor.pos;\n}; // :: number\n// The selection's head.\n\n\nprototypeAccessors.head.get = function () {\n  return this.$head.pos;\n}; // :: number\n// The lower bound of the selection's main range.\n\n\nprototypeAccessors.from.get = function () {\n  return this.$from.pos;\n}; // :: number\n// The upper bound of the selection's main range.\n\n\nprototypeAccessors.to.get = function () {\n  return this.$to.pos;\n}; // :: ResolvedPos\n// The resolved lowerbound of the selection's main range.\n\n\nprototypeAccessors.$from.get = function () {\n  return this.ranges[0].$from;\n}; // :: ResolvedPos\n// The resolved upper bound of the selection's main range.\n\n\nprototypeAccessors.$to.get = function () {\n  return this.ranges[0].$to;\n}; // :: bool\n// Indicates whether the selection contains any content.\n\n\nprototypeAccessors.empty.get = function () {\n  var ranges = this.ranges;\n\n  for (var i = 0; i < ranges.length; i++) {\n    if (ranges[i].$from.pos != ranges[i].$to.pos) {\n      return false;\n    }\n  }\n\n  return true;\n}; // eq:: (Selection) → bool\n// Test whether the selection is the same as another selection.\n// map:: (doc: Node, mapping: Mappable) → Selection\n// Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n// should be the new document to which we are mapping.\n// :: () → Slice\n// Get the content of this selection as a slice.\n\n\nSelection.prototype.content = function content() {\n  return this.$from.node(0).slice(this.from, this.to, true);\n}; // :: (Transaction, ?Slice)\n// Replace the selection with a slice or, if no slice is given,\n// delete the selection. Will append to the given transaction.\n\n\nSelection.prototype.replace = function replace(tr, content) {\n  if (content === void 0) content = Slice.empty; // Put the new selection at the position after the inserted\n  // content. When that ended in an inline node, search backwards,\n  // to get the position after that node. If not, search forward.\n\n  var lastNode = content.content.lastChild,\n      lastParent = null;\n\n  for (var i = 0; i < content.openEnd; i++) {\n    lastParent = lastNode;\n    lastNode = lastNode.lastChild;\n  }\n\n  var mapFrom = tr.steps.length,\n      ranges = this.ranges;\n\n  for (var i$1 = 0; i$1 < ranges.length; i$1++) {\n    var ref = ranges[i$1];\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var mapping = tr.mapping.slice(mapFrom);\n    tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i$1 ? Slice.empty : content);\n\n    if (i$1 == 0) {\n      selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);\n    }\n  }\n}; // :: (Transaction, Node)\n// Replace the selection with the given node, appending the changes\n// to the given transaction.\n\n\nSelection.prototype.replaceWith = function replaceWith(tr, node) {\n  var mapFrom = tr.steps.length,\n      ranges = this.ranges;\n\n  for (var i = 0; i < ranges.length; i++) {\n    var ref = ranges[i];\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var mapping = tr.mapping.slice(mapFrom);\n    var from = mapping.map($from.pos),\n        to = mapping.map($to.pos);\n\n    if (i) {\n      tr.deleteRange(from, to);\n    } else {\n      tr.replaceRangeWith(from, to, node);\n      selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);\n    }\n  }\n}; // toJSON:: () → Object\n// Convert the selection to a JSON representation. When implementing\n// this for a custom selection class, make sure to give the object a\n// `type` property whose value matches the ID under which you\n// [registered](#state.Selection^jsonID) your class.\n// :: (ResolvedPos, number, ?bool) → ?Selection\n// Find a valid cursor or leaf node selection starting at the given\n// position and searching back if `dir` is negative, and forward if\n// positive. When `textOnly` is true, only consider cursor\n// selections. Will return null when no valid selection position is\n// found.\n\n\nSelection.findFrom = function findFrom($pos, dir, textOnly) {\n  var inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);\n\n  if (inner) {\n    return inner;\n  }\n\n  for (var depth = $pos.depth - 1; depth >= 0; depth--) {\n    var found = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);\n\n    if (found) {\n      return found;\n    }\n  }\n}; // :: (ResolvedPos, ?number) → Selection\n// Find a valid cursor or leaf node selection near the given\n// position. Searches forward first by default, but if `bias` is\n// negative, it will search backwards first.\n\n\nSelection.near = function near($pos, bias) {\n  if (bias === void 0) bias = 1;\n  return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));\n}; // :: (Node) → Selection\n// Find the cursor or leaf node selection closest to the start of\n// the given document. Will return an\n// [`AllSelection`](#state.AllSelection) if no valid position\n// exists.\n\n\nSelection.atStart = function atStart(doc) {\n  return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);\n}; // :: (Node) → Selection\n// Find the cursor or leaf node selection closest to the end of the\n// given document.\n\n\nSelection.atEnd = function atEnd(doc) {\n  return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);\n}; // :: (Node, Object) → Selection\n// Deserialize the JSON representation of a selection. Must be\n// implemented for custom classes (as a static class method).\n\n\nSelection.fromJSON = function fromJSON(doc, json) {\n  if (!json || !json.type) {\n    throw new RangeError(\"Invalid input for Selection.fromJSON\");\n  }\n\n  var cls = classesById[json.type];\n\n  if (!cls) {\n    throw new RangeError(\"No selection type \" + json.type + \" defined\");\n  }\n\n  return cls.fromJSON(doc, json);\n}; // :: (string, constructor<Selection>)\n// To be able to deserialize selections from JSON, custom selection\n// classes must register themselves with an ID string, so that they\n// can be disambiguated. Try to pick something that's unlikely to\n// clash with classes from other modules.\n\n\nSelection.jsonID = function jsonID(id, selectionClass) {\n  if (id in classesById) {\n    throw new RangeError(\"Duplicate use of selection JSON ID \" + id);\n  }\n\n  classesById[id] = selectionClass;\n  selectionClass.prototype.jsonID = id;\n  return selectionClass;\n}; // :: () → SelectionBookmark\n// Get a [bookmark](#state.SelectionBookmark) for this selection,\n// which is a value that can be mapped without having access to a\n// current document, and later resolved to a real selection for a\n// given document again. (This is used mostly by the history to\n// track and restore old selections.) The default implementation of\n// this method just converts the selection to a text selection and\n// returns the bookmark for that.\n\n\nSelection.prototype.getBookmark = function getBookmark() {\n  return TextSelection.between(this.$anchor, this.$head).getBookmark();\n};\n\nObject.defineProperties(Selection.prototype, prototypeAccessors); // :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\n\nSelection.prototype.visible = true; // SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n// ::- Represents a selected range in a document.\n\nvar SelectionRange = function SelectionRange($from, $to) {\n  // :: ResolvedPos\n  // The lower bound of the range.\n  this.$from = $from; // :: ResolvedPos\n  // The upper bound of the range.\n\n  this.$to = $to;\n}; // ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\n\n\nvar TextSelection = /*@__PURE__*/function (Selection) {\n  function TextSelection($anchor, $head) {\n    if ($head === void 0) $head = $anchor;\n    Selection.call(this, $anchor, $head);\n  }\n\n  if (Selection) TextSelection.__proto__ = Selection;\n  TextSelection.prototype = Object.create(Selection && Selection.prototype);\n  TextSelection.prototype.constructor = TextSelection;\n  var prototypeAccessors$1 = {\n    $cursor: {\n      configurable: true\n    }\n  }; // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n\n  prototypeAccessors$1.$cursor.get = function () {\n    return this.$anchor.pos == this.$head.pos ? this.$head : null;\n  };\n\n  TextSelection.prototype.map = function map(doc, mapping) {\n    var $head = doc.resolve(mapping.map(this.head));\n\n    if (!$head.parent.inlineContent) {\n      return Selection.near($head);\n    }\n\n    var $anchor = doc.resolve(mapping.map(this.anchor));\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);\n  };\n\n  TextSelection.prototype.replace = function replace(tr, content) {\n    if (content === void 0) content = Slice.empty;\n    Selection.prototype.replace.call(this, tr, content);\n\n    if (content == Slice.empty) {\n      var marks = this.$from.marksAcross(this.$to);\n\n      if (marks) {\n        tr.ensureMarks(marks);\n      }\n    }\n  };\n\n  TextSelection.prototype.eq = function eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;\n  };\n\n  TextSelection.prototype.getBookmark = function getBookmark() {\n    return new TextBookmark(this.anchor, this.head);\n  };\n\n  TextSelection.prototype.toJSON = function toJSON() {\n    return {\n      type: \"text\",\n      anchor: this.anchor,\n      head: this.head\n    };\n  };\n\n  TextSelection.fromJSON = function fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\") {\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\");\n    }\n\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n  }; // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n\n\n  TextSelection.create = function create(doc, anchor, head) {\n    if (head === void 0) head = anchor;\n    var $anchor = doc.resolve(anchor);\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head));\n  }; // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n\n\n  TextSelection.between = function between($anchor, $head, bias) {\n    var dPos = $anchor.pos - $head.pos;\n\n    if (!bias || dPos) {\n      bias = dPos >= 0 ? 1 : -1;\n    }\n\n    if (!$head.parent.inlineContent) {\n      var found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);\n\n      if (found) {\n        $head = found.$head;\n      } else {\n        return Selection.near($head, bias);\n      }\n    }\n\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head;\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;\n\n        if ($anchor.pos < $head.pos != dPos < 0) {\n          $anchor = $head;\n        }\n      }\n    }\n\n    return new TextSelection($anchor, $head);\n  };\n\n  Object.defineProperties(TextSelection.prototype, prototypeAccessors$1);\n  return TextSelection;\n}(Selection);\n\nSelection.jsonID(\"text\", TextSelection);\n\nvar TextBookmark = function TextBookmark(anchor, head) {\n  this.anchor = anchor;\n  this.head = head;\n};\n\nTextBookmark.prototype.map = function map(mapping) {\n  return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));\n};\n\nTextBookmark.prototype.resolve = function resolve(doc) {\n  return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));\n}; // ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\n\n\nvar NodeSelection = /*@__PURE__*/function (Selection) {\n  function NodeSelection($pos) {\n    var node = $pos.nodeAfter;\n    var $end = $pos.node(0).resolve($pos.pos + node.nodeSize);\n    Selection.call(this, $pos, $end); // :: Node The selected node.\n\n    this.node = node;\n  }\n\n  if (Selection) NodeSelection.__proto__ = Selection;\n  NodeSelection.prototype = Object.create(Selection && Selection.prototype);\n  NodeSelection.prototype.constructor = NodeSelection;\n\n  NodeSelection.prototype.map = function map(doc, mapping) {\n    var ref = mapping.mapResult(this.anchor);\n    var deleted = ref.deleted;\n    var pos = ref.pos;\n    var $pos = doc.resolve(pos);\n\n    if (deleted) {\n      return Selection.near($pos);\n    }\n\n    return new NodeSelection($pos);\n  };\n\n  NodeSelection.prototype.content = function content() {\n    return new Slice(Fragment.from(this.node), 0, 0);\n  };\n\n  NodeSelection.prototype.eq = function eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor;\n  };\n\n  NodeSelection.prototype.toJSON = function toJSON() {\n    return {\n      type: \"node\",\n      anchor: this.anchor\n    };\n  };\n\n  NodeSelection.prototype.getBookmark = function getBookmark() {\n    return new NodeBookmark(this.anchor);\n  };\n\n  NodeSelection.fromJSON = function fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\") {\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\");\n    }\n\n    return new NodeSelection(doc.resolve(json.anchor));\n  }; // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n\n\n  NodeSelection.create = function create(doc, from) {\n    return new this(doc.resolve(from));\n  }; // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n\n\n  NodeSelection.isSelectable = function isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false;\n  };\n\n  return NodeSelection;\n}(Selection);\n\nNodeSelection.prototype.visible = false;\nSelection.jsonID(\"node\", NodeSelection);\n\nvar NodeBookmark = function NodeBookmark(anchor) {\n  this.anchor = anchor;\n};\n\nNodeBookmark.prototype.map = function map(mapping) {\n  var ref = mapping.mapResult(this.anchor);\n  var deleted = ref.deleted;\n  var pos = ref.pos;\n  return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);\n};\n\nNodeBookmark.prototype.resolve = function resolve(doc) {\n  var $pos = doc.resolve(this.anchor),\n      node = $pos.nodeAfter;\n\n  if (node && NodeSelection.isSelectable(node)) {\n    return new NodeSelection($pos);\n  }\n\n  return Selection.near($pos);\n}; // ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\n\n\nvar AllSelection = /*@__PURE__*/function (Selection) {\n  function AllSelection(doc) {\n    Selection.call(this, doc.resolve(0), doc.resolve(doc.content.size));\n  }\n\n  if (Selection) AllSelection.__proto__ = Selection;\n  AllSelection.prototype = Object.create(Selection && Selection.prototype);\n  AllSelection.prototype.constructor = AllSelection;\n\n  AllSelection.prototype.replace = function replace(tr, content) {\n    if (content === void 0) content = Slice.empty;\n\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size);\n      var sel = Selection.atStart(tr.doc);\n\n      if (!sel.eq(tr.selection)) {\n        tr.setSelection(sel);\n      }\n    } else {\n      Selection.prototype.replace.call(this, tr, content);\n    }\n  };\n\n  AllSelection.prototype.toJSON = function toJSON() {\n    return {\n      type: \"all\"\n    };\n  };\n\n  AllSelection.fromJSON = function fromJSON(doc) {\n    return new AllSelection(doc);\n  };\n\n  AllSelection.prototype.map = function map(doc) {\n    return new AllSelection(doc);\n  };\n\n  AllSelection.prototype.eq = function eq(other) {\n    return other instanceof AllSelection;\n  };\n\n  AllSelection.prototype.getBookmark = function getBookmark() {\n    return AllBookmark;\n  };\n\n  return AllSelection;\n}(Selection);\n\nSelection.jsonID(\"all\", AllSelection);\nvar AllBookmark = {\n  map: function map() {\n    return this;\n  },\n  resolve: function resolve(doc) {\n    return new AllSelection(doc);\n  }\n}; // FIXME we'll need some awareness of text direction when scanning for selections\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\n\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) {\n    return TextSelection.create(doc, pos);\n  }\n\n  for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    var child = node.child(i);\n\n    if (!child.isAtom) {\n      var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);\n\n      if (inner) {\n        return inner;\n      }\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));\n    }\n\n    pos += child.nodeSize * dir;\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  var last = tr.steps.length - 1;\n\n  if (last < startLen) {\n    return;\n  }\n\n  var step = tr.steps[last];\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return;\n  }\n\n  var map = tr.mapping.maps[last],\n      end;\n  map.forEach(function (_from, _to, _newFrom, newTo) {\n    if (end == null) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nvar UPDATED_SEL = 1,\n    UPDATED_MARKS = 2,\n    UPDATED_SCROLL = 4; // ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\n\nvar Transaction = /*@__PURE__*/function (Transform) {\n  function Transaction(state) {\n    Transform.call(this, state.doc); // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n\n    this.time = Date.now();\n    this.curSelection = state.selection; // The step count for which the current selection is valid.\n\n    this.curSelectionFor = 0; // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n\n    this.storedMarks = state.storedMarks; // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n\n    this.updated = 0; // Object used to store metadata properties for the transaction.\n\n    this.meta = Object.create(null);\n  }\n\n  if (Transform) Transaction.__proto__ = Transform;\n  Transaction.prototype = Object.create(Transform && Transform.prototype);\n  Transaction.prototype.constructor = Transaction;\n  var prototypeAccessors = {\n    selection: {\n      configurable: true\n    },\n    selectionSet: {\n      configurable: true\n    },\n    storedMarksSet: {\n      configurable: true\n    },\n    isGeneric: {\n      configurable: true\n    },\n    scrolledIntoView: {\n      configurable: true\n    }\n  }; // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n\n  prototypeAccessors.selection.get = function () {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));\n      this.curSelectionFor = this.steps.length;\n    }\n\n    return this.curSelection;\n  }; // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n\n\n  Transaction.prototype.setSelection = function setSelection(selection) {\n    if (selection.$from.doc != this.doc) {\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\");\n    }\n\n    this.curSelection = selection;\n    this.curSelectionFor = this.steps.length;\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;\n    this.storedMarks = null;\n    return this;\n  }; // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n\n\n  prototypeAccessors.selectionSet.get = function () {\n    return (this.updated & UPDATED_SEL) > 0;\n  }; // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n\n\n  Transaction.prototype.setStoredMarks = function setStoredMarks(marks) {\n    this.storedMarks = marks;\n    this.updated |= UPDATED_MARKS;\n    return this;\n  }; // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n\n\n  Transaction.prototype.ensureMarks = function ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks)) {\n      this.setStoredMarks(marks);\n    }\n\n    return this;\n  }; // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n\n\n  Transaction.prototype.addStoredMark = function addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));\n  }; // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n\n\n  Transaction.prototype.removeStoredMark = function removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));\n  }; // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n\n\n  prototypeAccessors.storedMarksSet.get = function () {\n    return (this.updated & UPDATED_MARKS) > 0;\n  };\n\n  Transaction.prototype.addStep = function addStep(step, doc) {\n    Transform.prototype.addStep.call(this, step, doc);\n    this.updated = this.updated & ~UPDATED_MARKS;\n    this.storedMarks = null;\n  }; // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n\n\n  Transaction.prototype.setTime = function setTime(time) {\n    this.time = time;\n    return this;\n  }; // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n\n\n  Transaction.prototype.replaceSelection = function replaceSelection(slice) {\n    this.selection.replace(this, slice);\n    return this;\n  }; // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n\n\n  Transaction.prototype.replaceSelectionWith = function replaceSelectionWith(node, inheritMarks) {\n    var selection = this.selection;\n\n    if (inheritMarks !== false) {\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || Mark.none));\n    }\n\n    selection.replaceWith(this, node);\n    return this;\n  }; // :: () → Transaction\n  // Delete the selection.\n\n\n  Transaction.prototype.deleteSelection = function deleteSelection() {\n    this.selection.replace(this);\n    return this;\n  }; // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n\n\n  Transaction.prototype.insertText = function insertText(text, from, to) {\n    if (to === void 0) to = from;\n    var schema = this.doc.type.schema;\n\n    if (from == null) {\n      if (!text) {\n        return this.deleteSelection();\n      }\n\n      return this.replaceSelectionWith(schema.text(text), true);\n    } else {\n      if (!text) {\n        return this.deleteRange(from, to);\n      }\n\n      var marks = this.storedMarks;\n\n      if (!marks) {\n        var $from = this.doc.resolve(from);\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));\n      }\n\n      this.replaceRangeWith(from, to, schema.text(text, marks));\n\n      if (!this.selection.empty) {\n        this.setSelection(Selection.near(this.selection.$to));\n      }\n\n      return this;\n    }\n  }; // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n\n\n  Transaction.prototype.setMeta = function setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value;\n    return this;\n  }; // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n\n\n  Transaction.prototype.getMeta = function getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key];\n  }; // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n\n\n  prototypeAccessors.isGeneric.get = function () {\n    for (var _ in this.meta) {\n      return false;\n    }\n\n    return true;\n  }; // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n\n\n  Transaction.prototype.scrollIntoView = function scrollIntoView() {\n    this.updated |= UPDATED_SCROLL;\n    return this;\n  };\n\n  prototypeAccessors.scrolledIntoView.get = function () {\n    return (this.updated & UPDATED_SCROLL) > 0;\n  };\n\n  Object.defineProperties(Transaction.prototype, prototypeAccessors);\n  return Transaction;\n}(Transform);\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self);\n}\n\nvar FieldDesc = function FieldDesc(name, desc, self) {\n  this.name = name;\n  this.init = bind(desc.init, self);\n  this.apply = bind(desc.apply, self);\n};\n\nvar baseFields = [new FieldDesc(\"doc\", {\n  init: function init(config) {\n    return config.doc || config.schema.topNodeType.createAndFill();\n  },\n  apply: function apply(tr) {\n    return tr.doc;\n  }\n}), new FieldDesc(\"selection\", {\n  init: function init(config, instance) {\n    return config.selection || Selection.atStart(instance.doc);\n  },\n  apply: function apply(tr) {\n    return tr.selection;\n  }\n}), new FieldDesc(\"storedMarks\", {\n  init: function init(config) {\n    return config.storedMarks || null;\n  },\n  apply: function apply(tr, _marks, _old, state) {\n    return state.selection.$cursor ? tr.storedMarks : null;\n  }\n}), new FieldDesc(\"scrollToSelection\", {\n  init: function init() {\n    return 0;\n  },\n  apply: function apply(tr, prev) {\n    return tr.scrolledIntoView ? prev + 1 : prev;\n  }\n})]; // Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\n\nvar Configuration = function Configuration(schema, plugins) {\n  var this$1 = this;\n  this.schema = schema;\n  this.fields = baseFields.concat();\n  this.plugins = [];\n  this.pluginsByKey = Object.create(null);\n\n  if (plugins) {\n    plugins.forEach(function (plugin) {\n      if (this$1.pluginsByKey[plugin.key]) {\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\");\n      }\n\n      this$1.plugins.push(plugin);\n      this$1.pluginsByKey[plugin.key] = plugin;\n\n      if (plugin.spec.state) {\n        this$1.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));\n      }\n    });\n  }\n}; // ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\n\n\nvar EditorState = function EditorState(config) {\n  this.config = config;\n};\n\nvar prototypeAccessors$1 = {\n  schema: {\n    configurable: true\n  },\n  plugins: {\n    configurable: true\n  },\n  tr: {\n    configurable: true\n  }\n}; // doc:: Node\n// The current document.\n// selection:: Selection\n// The selection.\n// storedMarks:: ?[Mark]\n// A set of marks to apply to the next input. Will be null when\n// no explicit marks have been set.\n// :: Schema\n// The schema of the state's document.\n\nprototypeAccessors$1.schema.get = function () {\n  return this.config.schema;\n}; // :: [Plugin]\n// The plugins that are active in this state.\n\n\nprototypeAccessors$1.plugins.get = function () {\n  return this.config.plugins;\n}; // :: (Transaction) → EditorState\n// Apply the given transaction to produce a new state.\n\n\nEditorState.prototype.apply = function apply(tr) {\n  return this.applyTransaction(tr).state;\n}; // : (Transaction) → bool\n\n\nEditorState.prototype.filterTransaction = function filterTransaction(tr, ignore) {\n  if (ignore === void 0) ignore = -1;\n\n  for (var i = 0; i < this.config.plugins.length; i++) {\n    if (i != ignore) {\n      var plugin = this.config.plugins[i];\n\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}; // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n// Verbose variant of [`apply`](#state.EditorState.apply) that\n// returns the precise transactions that were applied (which might\n// be influenced by the [transaction\n// hooks](#state.PluginSpec.filterTransaction) of\n// plugins) along with the new state.\n\n\nEditorState.prototype.applyTransaction = function applyTransaction(rootTr) {\n  if (!this.filterTransaction(rootTr)) {\n    return {\n      state: this,\n      transactions: []\n    };\n  }\n\n  var trs = [rootTr],\n      newState = this.applyInner(rootTr),\n      seen = null; // This loop repeatedly gives plugins a chance to respond to\n  // transactions as new transactions are added, making sure to only\n  // pass the transactions the plugin did not see before.\n\n  for (;;) {\n    var haveNew = false;\n\n    for (var i = 0; i < this.config.plugins.length; i++) {\n      var plugin = this.config.plugins[i];\n\n      if (plugin.spec.appendTransaction) {\n        var n = seen ? seen[i].n : 0,\n            oldState = seen ? seen[i].state : this;\n        var tr = n < trs.length && plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);\n\n        if (tr && newState.filterTransaction(tr, i)) {\n          tr.setMeta(\"appendedTransaction\", rootTr);\n\n          if (!seen) {\n            seen = [];\n\n            for (var j = 0; j < this.config.plugins.length; j++) {\n              seen.push(j < i ? {\n                state: newState,\n                n: trs.length\n              } : {\n                state: this,\n                n: 0\n              });\n            }\n          }\n\n          trs.push(tr);\n          newState = newState.applyInner(tr);\n          haveNew = true;\n        }\n\n        if (seen) {\n          seen[i] = {\n            state: newState,\n            n: trs.length\n          };\n        }\n      }\n    }\n\n    if (!haveNew) {\n      return {\n        state: newState,\n        transactions: trs\n      };\n    }\n  }\n}; // : (Transaction) → EditorState\n\n\nEditorState.prototype.applyInner = function applyInner(tr) {\n  if (!tr.before.eq(this.doc)) {\n    throw new RangeError(\"Applying a mismatched transaction\");\n  }\n\n  var newInstance = new EditorState(this.config),\n      fields = this.config.fields;\n\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);\n  }\n\n  for (var i$1 = 0; i$1 < applyListeners.length; i$1++) {\n    applyListeners[i$1](this, tr, newInstance);\n  }\n\n  return newInstance;\n}; // :: Transaction\n// Start a [transaction](#state.Transaction) from this state.\n\n\nprototypeAccessors$1.tr.get = function () {\n  return new Transaction(this);\n}; // :: (Object) → EditorState\n// Create a new state.\n//\n// config::- Configuration options. Must contain `schema` or `doc` (or both).\n//\n//    schema:: ?Schema\n//    The schema to use (only relevant if no `doc` is specified).\n//\n//    doc:: ?Node\n//    The starting document.\n//\n//    selection:: ?Selection\n//    A valid selection in the document.\n//\n//    storedMarks:: ?[Mark]\n//    The initial set of [stored marks](#state.EditorState.storedMarks).\n//\n//    plugins:: ?[Plugin]\n//    The plugins that should be active in this state.\n\n\nEditorState.create = function create(config) {\n  var $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);\n  var instance = new EditorState($config);\n\n  for (var i = 0; i < $config.fields.length; i++) {\n    instance[$config.fields[i].name] = $config.fields[i].init(config, instance);\n  }\n\n  return instance;\n}; // :: (Object) → EditorState\n// Create a new state based on this one, but with an adjusted set of\n// active plugins. State fields that exist in both sets of plugins\n// are kept unchanged. Those that no longer exist are dropped, and\n// those that are new are initialized using their\n// [`init`](#state.StateField.init) method, passing in the new\n// configuration object..\n//\n// config::- configuration options\n//\n//   plugins:: [Plugin]\n//   New set of active plugins.\n\n\nEditorState.prototype.reconfigure = function reconfigure(config) {\n  var $config = new Configuration(this.schema, config.plugins);\n  var fields = $config.fields,\n      instance = new EditorState($config);\n\n  for (var i = 0; i < fields.length; i++) {\n    var name = fields[i].name;\n    instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);\n  }\n\n  return instance;\n}; // :: (?union<Object<Plugin>, string, number>) → Object\n// Serialize this state to JSON. If you want to serialize the state\n// of plugins, pass an object mapping property names to use in the\n// resulting JSON object to plugin objects. The argument may also be\n// a string or number, in which case it is ignored, to support the\n// way `JSON.stringify` calls `toString` methods.\n\n\nEditorState.prototype.toJSON = function toJSON(pluginFields) {\n  var result = {\n    doc: this.doc.toJSON(),\n    selection: this.selection.toJSON()\n  };\n\n  if (this.storedMarks) {\n    result.storedMarks = this.storedMarks.map(function (m) {\n      return m.toJSON();\n    });\n  }\n\n  if (pluginFields && typeof pluginFields == 'object') {\n    for (var prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\") {\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\");\n      }\n\n      var plugin = pluginFields[prop],\n          state = plugin.spec.state;\n\n      if (state && state.toJSON) {\n        result[prop] = state.toJSON.call(plugin, this[plugin.key]);\n      }\n    }\n  }\n\n  return result;\n}; // :: (Object, Object, ?Object<Plugin>) → EditorState\n// Deserialize a JSON representation of a state. `config` should\n// have at least a `schema` field, and should contain array of\n// plugins to initialize the state with. `pluginFields` can be used\n// to deserialize the state of plugins, by associating plugin\n// instances with the property names they use in the JSON object.\n//\n// config::- configuration options\n//\n//   schema:: Schema\n//   The schema to use.\n//\n//   plugins:: ?[Plugin]\n//   The set of active plugins.\n\n\nEditorState.fromJSON = function fromJSON(config, json, pluginFields) {\n  if (!json) {\n    throw new RangeError(\"Invalid input for EditorState.fromJSON\");\n  }\n\n  if (!config.schema) {\n    throw new RangeError(\"Required config field 'schema' missing\");\n  }\n\n  var $config = new Configuration(config.schema, config.plugins);\n  var instance = new EditorState($config);\n  $config.fields.forEach(function (field) {\n    if (field.name == \"doc\") {\n      instance.doc = Node.fromJSON(config.schema, json.doc);\n    } else if (field.name == \"selection\") {\n      instance.selection = Selection.fromJSON(instance.doc, json.selection);\n    } else if (field.name == \"storedMarks\") {\n      if (json.storedMarks) {\n        instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);\n      }\n    } else {\n      if (pluginFields) {\n        for (var prop in pluginFields) {\n          var plugin = pluginFields[prop],\n              state = plugin.spec.state;\n\n          if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);\n            return;\n          }\n        }\n      }\n\n      instance[field.name] = field.init(config, instance);\n    }\n  });\n  return instance;\n}; // Kludge to allow the view to track mappings between different\n// instances of a state.\n//\n// FIXME this is no longer needed as of prosemirror-view 1.9.0,\n// though due to backwards-compat we should probably keep it around\n// for a while (if only as a no-op)\n\n\nEditorState.addApplyListener = function addApplyListener(f) {\n  applyListeners.push(f);\n};\n\nEditorState.removeApplyListener = function removeApplyListener(f) {\n  var found = applyListeners.indexOf(f);\n\n  if (found > -1) {\n    applyListeners.splice(found, 1);\n  }\n};\n\nObject.defineProperties(EditorState.prototype, prototypeAccessors$1);\nvar applyListeners = []; // PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (var prop in obj) {\n    var val = obj[prop];\n\n    if (val instanceof Function) {\n      val = val.bind(self);\n    } else if (prop == \"handleDOMEvents\") {\n      val = bindProps(val, self, {});\n    }\n\n    target[prop] = val;\n  }\n\n  return target;\n} // ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\n\n\nvar Plugin = function Plugin(spec) {\n  // :: EditorProps\n  // The [props](#view.EditorProps) exported by this plugin.\n  this.props = {};\n\n  if (spec.props) {\n    bindProps(spec.props, this, this.props);\n  } // :: Object\n  // The plugin's [spec object](#state.PluginSpec).\n\n\n  this.spec = spec;\n  this.key = spec.key ? spec.key.key : createKey(\"plugin\");\n}; // :: (EditorState) → any\n// Extract the plugin's state field from an editor state.\n\n\nPlugin.prototype.getState = function getState(state) {\n  return state[this.key];\n}; // StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\n\nvar keys = Object.create(null);\n\nfunction createKey(name) {\n  if (name in keys) {\n    return name + \"$\" + ++keys[name];\n  }\n\n  keys[name] = 0;\n  return name + \"$\";\n} // ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\n\n\nvar PluginKey = function PluginKey(name) {\n  if (name === void 0) name = \"key\";\n  this.key = createKey(name);\n}; // :: (EditorState) → ?Plugin\n// Get the active plugin with this key, if any, from an editor\n// state.\n\n\nPluginKey.prototype.get = function get(state) {\n  return state.config.pluginsByKey[this.key];\n}; // :: (EditorState) → ?any\n// Get the plugin's state from an editor state.\n\n\nPluginKey.prototype.getState = function getState(state) {\n  return state[this.key];\n};\n\nexport { AllSelection, EditorState, NodeSelection, Plugin, PluginKey, Selection, SelectionRange, TextSelection, Transaction };","map":{"version":3,"mappings":"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","names":["const","classesById","Object","create","Selection","$anchor","$head","ranges","SelectionRange","min","max","prototypeAccessors","anchor","get","pos","head","from","$from","to","$to","empty","let","i","length","content","node","slice","replace","tr","Slice","lastNode","lastChild","lastParent","openEnd","mapFrom","steps","mapping","replaceRange","map","selectionToInsertionEnd","isInline","isTextblock","replaceWith","deleteRange","replaceRangeWith","findFrom","$pos","dir","textOnly","inner","parent","inlineContent","TextSelection","findSelectionIn","index","depth","found","before","after","near","bias","AllSelection","atStart","doc","atEnd","size","childCount","fromJSON","json","type","RangeError","cls","jsonID","id","selectionClass","prototype","getBookmark","between","visible","super","prototypeAccessors$1","$cursor","resolve","call","marks","marksAcross","ensureMarks","eq","other","TextBookmark","toJSON","dPos","NodeSelection","nodeAfter","$end","nodeSize","mapResult","deleted","Fragment","NodeBookmark","isSelectable","isText","spec","selectable","delete","sel","selection","setSelection","AllBookmark","text","child","isAtom","startLen","last","step","ReplaceStep","ReplaceAroundStep","maps","end","forEach","_from","_to","_newFrom","newTo","UPDATED_SEL","UPDATED_MARKS","UPDATED_SCROLL","Transaction","state","time","Date","now","curSelection","curSelectionFor","storedMarks","updated","meta","selectionSet","setStoredMarks","Mark","sameSet","addStoredMark","mark","addToSet","removeStoredMark","removeFromSet","storedMarksSet","addStep","setTime","replaceSelection","replaceSelectionWith","inheritMarks","none","deleteSelection","insertText","schema","setMeta","key","value","getMeta","isGeneric","_","scrollIntoView","scrolledIntoView","Transform","bind","f","self","FieldDesc","name","desc","init","apply","baseFields","config","topNodeType","createAndFill","instance","_marks","_old","prev","Configuration","plugins","fields","concat","pluginsByKey","plugin","this","push","EditorState","applyTransaction","filterTransaction","ignore","rootTr","transactions","trs","newState","applyInner","seen","haveNew","appendTransaction","n","oldState","j","newInstance","field","applyListeners","$config","reconfigure","hasOwnProperty","pluginFields","result","m","prop","Node","markFromJSON","addApplyListener","removeApplyListener","indexOf","splice","bindProps","obj","target","val","Function","Plugin","props","createKey","getState","keys","PluginKey"],"sources":["/Users/lucasrodriguespereira/Projects/clipping/toastui-test/my-app/node_modules/prosemirror-state/src/selection.js","/Users/lucasrodriguespereira/Projects/clipping/toastui-test/my-app/node_modules/prosemirror-state/src/transaction.js","/Users/lucasrodriguespereira/Projects/clipping/toastui-test/my-app/node_modules/prosemirror-state/src/state.js","/Users/lucasrodriguespereira/Projects/clipping/toastui-test/my-app/node_modules/prosemirror-state/src/plugin.js"],"sourcesContent":["import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) → bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) → Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () → Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () → Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) → ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) → Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) → Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () → SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () → Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n","import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) → EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) → bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) → EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) → EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) → EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) → Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) → EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n","// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) → any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) → ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) → ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n"]},"metadata":{},"sourceType":"module"}